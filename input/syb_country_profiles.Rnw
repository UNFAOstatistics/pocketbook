


<<country_profiles, results='hide'>>=

###########################################################################
## This script generates the ICN2 Statistical Pocketbook 2014
###########################################################################

###########################################################################
## Country profiles
###########################################################################

if (!exists("syb.df$missing")) {

  syb.df$missing <- "not def"

  }

temp <- syb.df

library(dplyr)
library(xtable)
library(lazyeval)
library(tidyr)
library(stringr)
library(scales)
library(ggplot2)
library(readxl)
library(zoo)

syb.df$NV.AGR.TOTL.ZS[is.na(syb.df$NV.AGR.TOTL.ZS)]

##' Sanitize the expression for Latex code
##'
##' The function sanitize an expression for the Latex code
##'
##' @param str A string to be sanitized
##' @param html
##' @param type Specify whether the expression is for text or table
##' @export

sanitizeToLatex <- function(str, html=FALSE, type=c("text","table")) {

      type <- match.arg(type)

      result <- as.character(str)

      result <- gsub("\\\\-","TEX.BACKSLASH",result)
      result <- gsub("\\\\","SANITIZE.BACKSLASH",result)
      result <- gsub("$","\\$",result,fixed=TRUE)
      result <- gsub(">","$>$",result,fixed=TRUE)
      result <- gsub("<","$<$",result,fixed=TRUE)
      result <- gsub("|","$|$",result,fixed=TRUE)
      result <- gsub("{","\\{",result,fixed=TRUE)
      result <- gsub("}","\\}",result,fixed=TRUE)
      result <- gsub("%","\\%",result,fixed=TRUE)
      result <- gsub("&","\\&",result,fixed=TRUE)
      result <- gsub("_","\\_",result,fixed=TRUE)
      ## result <- gsub("_", "\\textsubscript", result, fixed = TRUE)
      result <- gsub("#","\\#",result,fixed=TRUE)
      result <- gsub("^", ifelse(type == "table", "\\verb|^|",
                                 "\\textsuperscript "), result,fixed = TRUE)
      result <- gsub("~","\\~{}",result,fixed=TRUE)
      result <- gsub("Ã´","\\^{o}",result,fixed=TRUE)
      result <- gsub("?","\\^{o}",result,fixed=TRUE)
      result <- gsub("Ã¢","\\^{a}",result,fixed=TRUE)
      result <- gsub("Ã¨","\\`{e}",result,fixed=TRUE)
      result <- gsub("?","\\`{e}",result,fixed=TRUE)
      result <- gsub("Ã©","\\'{e}",result,fixed=TRUE)
      result <- gsub("?","\\'{e}",result,fixed=TRUE)
      result <- gsub("?","\\'{o}",result,fixed=TRUE)
      result <- gsub("?","\\`{o}",result,fixed=TRUE)
      result <- gsub("?","\\'{i}",result,fixed=TRUE)
      result <- gsub("?","\\`{i}",result,fixed=TRUE)
      result <- gsub("?","\\'{I}",result,fixed=TRUE)
      result <- gsub("?","\\`{I}",result,fixed=TRUE)
      result <- gsub("?","\\r{A}",result,fixed=TRUE)
      result <- gsub("?","\\c{c}",result,fixed=TRUE)
      result <- gsub("?","\\'{a}",result,fixed=TRUE)
      result <- gsub("?","\\`{a}",result,fixed=TRUE)
      result <- gsub("?","\\'{A}",result,fixed=TRUE)
      result <- gsub("?","\\`{A}",result,fixed=TRUE)
      result <- gsub("?","\\'{u}",result,fixed=TRUE)
      result <- gsub("?","\\`{u}",result,fixed=TRUE)
      result <- gsub("?","\\~{n}",result,fixed=TRUE)
      result <- gsub("SANITIZE.BACKSLASH","$\\backslash$",result,fixed=TRUE)
      result <- gsub("TEX.BACKSLASH","\\-",result,fixed=TRUE)
      if(html) {
        result <- gsub("( www.[0-9A-Za-z./\\-\\_]*)"," \\\\url{\\1}",result)
      	result <- gsub("(http://(www.)*[0-9A-Za-z./\\-\\_]*)","\\\\url{\\1}",result)
      	dotSlash<-grepl("\\url\\{.*\\.}",result)
      	result[dotSlash] <- gsub("\\.\\}","\\}\\.",result[dotSlash])
      }

      ## special expressions
      result <- gsub("km2", "km\\textsuperscript{2}", result, fixed = TRUE)
      result <- gsub("m3", "m\\textsuperscript{3}", result, fixed = TRUE)
      result <- gsub("CO2", "CO\\textsubscript{2}", result, fixed = TRUE)


      return(result)
    }

## -------------------------------------------------------------------------------------
# Variables in common

# merge latest FSI data from Filippo

if (!("FS.DA.ADESA.PCT3D" %in% names(syb.df))) {

  dat <- read.csv(paste0(data.dir,"/FSI2015_DisseminationDataset.csv"), stringsAsFactors=FALSE)
  dat$FAOST_CODE <- as.factor(dat$FAOST_CODE)
  dat$FAOST_CODE <- as.numeric(levels(dat$FAOST_CODE))[dat$FAOST_CODE]
  # SOFI to M49 conversions
  # Asia
  dat$FAOST_CODE[dat$FAOST_CODE == 5853] <- 5300
  dat$FAOST_CODE[dat$FAOST_CODE == 5001] <- 5000

  # Add Area var from syb.df
  tmp <- syb.df[!duplicated(dat[c("FAOST_CODE")]),]
  dat <- merge(dat,tmp[c("FAOST_CODE","Area")],by="FAOST_CODE")
  dat <- merge(dat,FAOcountryProfile[c("FAOST_CODE","SHORT_NAME")],by="FAOST_CODE", all.x=TRUE)

  dat <- dat[!duplicated(dat[c("FAOST_CODE","Year")]),]
  vars_to_exclude <- names(syb.df)[names(syb.df) %in% names(dat)][c(-1:-4,-14)]
  myvars <- names(syb.df) %in% vars_to_exclude
  syb.df <- syb.df[!myvars]

  vars_to_exclude <- c("FAO_TABLE_NAME","SHORT_NAME","Area")
  myvars <- names(dat) %in% vars_to_exclude
  dat <- dat[!myvars]


  syb.df <- merge(syb.df,dat,by=c("FAOST_CODE","Year"),all.x=TRUE)
}




if (!("area_harvested" %in% names(syb.df))) {

  ## Area harvested
  load(paste0(data.dir,"/Production_Crops_E_All_Data.RData"))

  group_means <- function(data,varname,years) {
    filter(data, Year %in% years) %>% group_by_("CountryCode") %>% summarise_(value = interp(~max(varname, na.rm = TRUE), varname = as.name(varname)))
  }

  df92 <- group_means(dat,"Value",1990)
  df92$Year <- 1990
  df02 <- group_means(dat,"Value",2000)
  df02$Year <- 2000
  df14 <- group_means(dat,"Value",2013)
  df14$Year <- 2014

  df_area_harvested <- rbind(df92,df02,df14)
  names(df_area_harvested) <- c("FAOST_CODE","area_harvested","Year")


  syb.df <- merge(syb.df,df_area_harvested,by=c("FAOST_CODE","Year"), all.x=TRUE)
  syb.df$cropping_intensity_ratio <- syb.df$area_harvested / syb.df$RL.AREA.AGR.HA.NO
}

## Food security

if (!("share_of_des_cereals_roots_tubers" %in% names(syb.df))) {

  ## Area harvested
  # dat <- read.csv("./database/Data/Raw/food_security/Food_Security_Data_E_All_Data_(Norm).csv")
  # save(dat, file="./database/Data/Raw/food_security/Food_Security_Data_E_All_Data_(Norm).RData")
  load(paste0(data.dir,"/Food_Security_Data_E_All_Data_(Norm).RData"))

  dat <- dat[dat$Item == "Share of dietary energy supply derived from cereals, roots and tubers (%) (3-year average)",c("Country.Code","Year","Value")]
  names(dat) <- c("FAOST_CODE","Year","share_of_des_cereals_roots_tubers")

  table(dat$Year)
  dat$Year2[dat$Year %in% "2013-2015"] <- 2014
  dat$Year2[dat$Year %in% "1999-2001"] <- 2000
  dat$Year2[dat$Year %in% "1989-1991"] <- 1990
  dat <- dat[!is.na(dat$Year2),]
  dat$Year <- dat$Year2
  dat$Year2 <- NULL

  syb.df <- merge(syb.df,dat,by=c("FAOST_CODE","Year"), all.x=TRUE)
}

## Fertilisers

if (!("nitrogen_tonnes_per_ha" %in% names(syb.df))) {

  ##
  # dat <- read.csv("~/fao_temp/pocketbook_temp/fertilizers/Inputs_Fertilizers_E_All_Data_(Norm).csv", stringsAsFactors = FALSE)
  # save(dat, file="./database/Data/Raw/fertilizers/Inputs_Fertilizers_E_All_Data_(Norm).RData")
  load(paste0(data.dir,"/Inputs_Fertilizers_E_All_Data_(Norm).RData"))

  dat <- dat[dat$Item %in% c("Phosphate Fertilizers (P205 total nutrients)",
                             "Potash Fertilizers (K20 total nutrients)",
                             "Nitrogen Fertilizers (N total nutrients)") &
               dat$Element == "Consumption in nutrients" &
               dat$Unit == "tonnes of nutrients",
             c("Country.Code","Year","Value","Item")]

  names(dat) <- c("FAOST_CODE","Year","value","Item")
  dat$Item <- as.character(dat$Item)
  dat$Item[dat$Item == "Phosphate Fertilizers (P205 total nutrients)"] <- "phosphate_tonnes"
  dat$Item[dat$Item == "Potash Fertilizers (K20 total nutrients)"] <- "potash_tonnes"
  dat$Item[dat$Item == "Nitrogen Fertilizers (N total nutrients)"] <- "nitrogen_tonnes"

  dat <- spread(dat, Item, value)

  for (i in 1:ncol(dat)) {
    dat[[i]] <- as.numeric(dat[[i]])
  }

  dat$FAOST_CODE[dat$FAOST_CODE == 41] <- 351

  syb.df <- merge(syb.df,dat,by=c("FAOST_CODE","Year"), all.x=TRUE)
  syb.df$phosphate_tonnes_per_ha <- syb.df$phosphate_tonnes / syb.df$RL.AREA.AGR.HA.NO
  syb.df$potash_tonnes_per_ha <- syb.df$potash_tonnes / syb.df$RL.AREA.AGR.HA.NO
  syb.df$nitrogen_tonnes_per_ha <- syb.df$nitrogen_tonnes / syb.df$RL.AREA.AGR.HA.NO
  syb.df$total_nutrients_tonnes_per_ha <- (syb.df$phosphate_tonnes +
                                           syb.df$potash_tonnes +
                                           syb.df$nitrogen_tonnes) / syb.df$RL.AREA.AGR.HA.NO


}



if (!("aqua_culture_share" %in% names(syb.df))) {

  syb.df$aqua_culture_share <- syb.df$FI.PRD.AQ.TN.NO / (syb.df$FI.PRD.AQ.TN.NO + syb.df$FI.PRD.CAPT.TN.NO) *100
}



if (!("rural_pop_share" %in% names(syb.df))) {

  syb.df$rural_pop_share <- syb.df$OA.TPR.POP.PPL.NO / syb.df$OA.TPBS.POP.PPL.NO *100
}


if (!("agricultural_exports_share" %in% names(syb.df))) {

  dat <- getFAOtoSYB(domainCode = "TP",
                   elementCode = 5922,
                   itemCode = 1882)
  dat1 <- dat$aggregates
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

  #syb.df$agricultural_exports_share <- syb.df$TP_1882_5922 / (syb.df$NY.GDP.MKTP.CD*1000)  *100
  syb.df$agricultural_exports_share <- syb.df$TP_1882_5922*1000 / syb.df$NY.GDP.MKTP.CD  * 100
}


if (!("improved_water_source_rural" %in% names(syb.df))){

  dat <- getWDItoSYB(name = "improved_water_source_rural", indicator = "SH.H2O.SAFE.RU.ZS")
  dat1 <- dat$aggregates
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$ISO2_WB_CODE, "iso2c", "fao")
  dat1 <- dat1[c("FAOST_CODE","Year","improved_water_source_rural")]
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$improved_water_source_rural),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

}





## FISHFISHFISH

# Add note on “Food” – Amy will check whether food trade and food production include fish. If not, add end note, indicating the exclusion of fish from food – After the dissemination of pocketbook, ESS/FIPS will seek the way to include fish into FAO “food” statistics

# "Second, I want to keep fish production comparable with other food component as much as possible. It is not possible to provide value of fish production.
# However, at least, it will be preferable to normalize to the base period 2004-06. In the other words, taking average production quantity of 2004-06 as 100.
# This way, all food components would show the relative changes within the period, without referring relative contribution among different components."

# These are now computed within the fisheriesn section in plots and maps



# New production indices computed by Amanda

if (!("Sugar.raw" %in% names(syb.df))) {

  # dat <- read.csv("./database/Data/Raw/production_indices/Production_Indices_E_All_Data_(Norm).csv")
  # save(dat, file="./database/Data/Raw/production_indices/Production_Indices_E_All_Data_(Norm).RData")
  load(paste0(data.dir,"/Production_Indices_E_All_Data_(Norm).RData"))

  dat <- dat[dat$Item %in% c("Roots and Tubers,Total",
                             "Vegetables and Fruit Primary",
                             "Sugar, raw",
                             "Oilcrops Primary",
                             "Meat indigenous, total",
                             "Milk,Total") &
               dat$Element == "Net Production Index Number (2004-2006 = 100)",
             c("Country.Code","Year","Value","Item")]

  names(dat) <- c("FAOST_CODE","Year","value","Item")
  dat <- spread(dat, # data
               Item, # class-var
               value) # amount
  names(dat) <- str_replace_all(names(dat), " ", ".")
  names(dat) <- str_replace_all(names(dat), ",", ".")
  names(dat) <- str_replace_all(names(dat), "\\.\\.", ".")
  syb.df <- merge(syb.df,dat,by=c("FAOST_CODE","Year"), all.x=TRUE)
}

if (!("energy.for.power.irrigation" %in% names(syb.df))) {
  #library(gdata)
  dat <- read.csv(paste0(data.dir,"/energy_consumption_for_power_irrigation.csv"), stringsAsFactors = FALSE)
  dat <- dat[c("AreaCode","Year","Value")]
  names(dat) <- c("FAOST_CODE","Year","energy.for.power.irrigation")
  dat$FAOST_CODE <- as.numeric(dat$FAOST_CODE)
  dat$Year <- as.numeric(dat$Year)
  dat <- dat[!duplicated(dat[c("FAOST_CODE","Year")]),]
  syb.df <- merge(syb.df,dat,by=c("FAOST_CODE","Year"),all.x=TRUE)
}


## Water indicators for China

water_vars <- names(syb.df)[grep("^AQ.", names(syb.df))]
water_vars_plus <- c("Year","FAOST_CODE",water_vars)
water_vars.df <- syb.df[water_vars_plus]
water_vars.df <- water_vars.df[water_vars.df$FAOST_CODE != 351,]
water_vars.df$FAOST_CODE[water_vars.df$FAOST_CODE == 357] <- 351

myvars <- names(syb.df) %in% water_vars
syb.df <- syb.df[!myvars]
syb.df <- merge(syb.df,water_vars.df,by=c("FAOST_CODE","Year"), all.x=TRUE)


#####################################################################################
##                                                                                 ##
## Coffee book variables                                                           ##
##                                                                                 ##
#####################################################################################

# Consumer prices, coffee

if (region_to_report == "COF"){

  # Producer prices, green coffee (US$ per tonne)
dat <- getFAOtoSYB(domainCode = "PP",
                   elementCode = 5532,
                   itemCode = 656)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

# Producer price index (2004-06=100)
dat <- getFAOtoSYB(domainCode = "PI",
                   elementCode = 5539,
                   itemCode = 656)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)


# Exports, coffee:
## Green
dat <- getFAOtoSYB(domainCode = "TP",
                   elementCode = 5922,
                   itemCode = 656)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

## Roasted
dat <- getFAOtoSYB(domainCode = "TP",
                   elementCode = 5922,
                   itemCode = 657)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

## Extracts
dat <- getFAOtoSYB(domainCode = "TP",
                   elementCode = 5922,
                   itemCode = 659)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)


# Imports, coffee:
## Green
dat <- getFAOtoSYB(domainCode = "TP",
                   elementCode = 5622,
                   itemCode = 656)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

## Roasted
dat <- getFAOtoSYB(domainCode = "TP",
                   elementCode = 5622,
                   itemCode = 657)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

## Extracts
dat <- getFAOtoSYB(domainCode = "TP",
                   elementCode = 5622,
                   itemCode = 659)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

# Area harvested, coffee (ha)
dat <- getFAOtoSYB(domainCode = "QC",
                   elementCode = 5312,
                   itemCode = 656)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)


# Yield, coffee (hg/ha)

dat <- getFAOtoSYB(domainCode = "QC",
                   elementCode = 5419,
                   itemCode = 656)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)


# Production quantity, coffee (mln tonnes)
dat <- getFAOtoSYB(domainCode = "QC",
                   elementCode = 5510,
                   itemCode = 656)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)
#
# Vegetal (crop) products (kcal/cap/day)
dat <- getFAOtoSYB(domainCode = "CC",
                   elementCode = 664,
                   itemCode = 2903)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)


# Animal products (kcal/cap/day)
dat <- getFAOtoSYB(domainCode = "CL",
                   elementCode = 664,
                   itemCode = 2941)
dat1 <- dat$aggregates
syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

}



#
# GHG emissions from coffee (% of total)


#########################################################
#                                                       #
#    RAP regional book vars                             #
#                                                       #
#########################################################

# Droughts, floods, extreme temperatures (% of population, average 1990-2009)

if (!("droughts_floods_temperature" %in% names(syb.df)) & region_to_report == "RAP"){

  dat <- getWDItoSYB(name = "droughts_floods_temperature", indicator = "EN.CLC.MDAT.ZS")
  dat1 <- dat$aggregates
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$ISO2_WB_CODE, "iso2c", "fao")
  dat1 <- dat1[c("FAOST_CODE","Year","droughts_floods_temperature")]
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$droughts_floods_temperature),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

}


#########################################################
#                                                       #
#    REU regional book vars                             #
#                                                       #
#########################################################


if (!("malnutrition_prevalence" %in% names(syb.df)) & region_to_report == "REU"){

  # malnutrition_prevalence, height for age

  dat <- getWDItoSYB(name = "malnutrition_prevalence", indicator = "SH.STA.STNT.ZS")
  dat1 <- dat$aggregates
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$ISO2_WB_CODE, "iso2c", "fao")
  dat1 <- dat1[c("FAOST_CODE","Year","malnutrition_prevalence")]
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$malnutrition_prevalence),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

  # Prevalence of wasting (% of children under 5)

  dat <- getWDItoSYB(name = "wasting_prevalence", indicator = "SH.STA.WAST.ZS")
  dat1 <- dat$aggregates
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$ISO2_WB_CODE, "iso2c", "fao")
  dat1 <- dat1[c("FAOST_CODE","Year","wasting_prevalence")]
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$wasting_prevalence),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

  # Prevalence of overweight (% of children under 5)

  dat <- getWDItoSYB(name = "overweigth_prevalence", indicator = "SH.STA.OWGH.ZS")
  dat1 <- dat$aggregates
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$ISO2_WB_CODE, "iso2c", "fao")
  dat1 <- dat1[c("FAOST_CODE","Year","overweigth_prevalence")]
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$overweigth_prevalence),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)


  # Health expenditure, total: WDI
  dat <- getWDItoSYB(name = "health_expenditure_total", indicator = "SH.XPD.TOTL.ZS")
  dat1 <- dat$aggregates
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$ISO2_WB_CODE, "iso2c", "fao")
  dat1 <- dat1[c("FAOST_CODE","Year","health_expenditure_total")]
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$health_expenditure_total),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)


  # Health expenditure per capita PPP: WDI
  dat <- getWDItoSYB(name = "health_expenditure_per_capita", indicator = "SH.XPD.PCAP")
  dat1 <- dat$aggregates
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$ISO2_WB_CODE, "iso2c", "fao")
  dat1 <- dat1[c("FAOST_CODE","Year","health_expenditure_per_capita")]
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$health_expenditure_per_capita),]
  dat1
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

  # MALE FEMALE STUFF

  # Overweight
  dat1 <- read.csv("http://apps.who.int/gho/athena/data/data-coded.csv?target=GHO/NCD_BMI_25A&filter=AGEGROUP:*;COUNTRY:*;SEX:*")
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$COUNTRY, "iso3c", "fao")
  dat1 <- dat1 %>%  filter(SEX != "BTSX") %>%  select(FAOST_CODE,YEAR,SEX,Numeric) %>%  mutate(Numeric = round(Numeric,0))
  dat1 <- spread(dat1, SEX, Numeric)
  dat1 <- dat1 %>% mutate(overweight = paste(MLE,FMLE, sep="/")) %>% select(FAOST_CODE,YEAR,overweight)
  names(dat1) <- c("FAOST_CODE","Year","overweight")
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$overweight),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

  # Obesity
  dat1 <- read.csv("http://apps.who.int/gho/athena/data/data-coded.csv?target=GHO/NCD_BMI_30A&filter=AGEGROUP:*;COUNTRY:*;SEX:*")
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$COUNTRY, "iso3c", "fao")
  dat1 <- dat1 %>%  filter(SEX != "BTSX") %>%  select(FAOST_CODE,YEAR,SEX,Numeric) %>%  mutate(Numeric = round(Numeric,0))
  dat1 <- spread(dat1, SEX, Numeric)
  dat1 <- dat1 %>% mutate(obesity = paste(MLE,FMLE, sep="/")) %>% select(FAOST_CODE,YEAR,obesity)
  names(dat1) <- c("FAOST_CODE","Year","obesity")
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$obesity),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

  # tot_pop_male_female
  dat <- syb.df %>% select(FAOST_CODE,Year,OA.TPM.POP.PPL.NO,OA.TPF.POP.PPL.NO)
  dat <- dat[!is.na(dat$OA.TPF.POP.PPL.NO),]
  dat <- dat[!is.na(dat$OA.TPM.POP.PPL.NO),]
  dat$OA.TPF.POP.PPL.NO <- round(dat$OA.TPF.POP.PPL.NO / 1000000,1)
  dat$OA.TPM.POP.PPL.NO <- round(dat$OA.TPM.POP.PPL.NO / 1000000,1)
  dat$tot_pop_male_female <- paste(dat$OA.TPM.POP.PPL.NO,dat$OA.TPF.POP.PPL.NO,sep="/")
  dat1 <- dat[c("FAOST_CODE","Year","tot_pop_male_female")]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)



  # # rur_pop_share_male_female
  dat <- read_csv(paste0(root.dir,"./input/data/REU/rur_rub_pocketbook_data.csv"))
  dat <- dat[c(1,2,3,4,22)]
  names(dat) <- c("SHORT_NAME","Year","Sex","Area","Total")
  dat <- dat[!duplicated(dat[c("SHORT_NAME","Year","Sex","Area")]),]
  dat <- merge(dat,FAOcountryProfile[c("SHORT_NAME","FAOST_CODE")],by="SHORT_NAME")

  dat$Total <- str_replace_all(dat$Total, ",", "")
  dat$Total <- factor(dat$Total)
  dat$Total <- as.numeric(levels(dat$Total))[dat$Total]

  dat1 <- spread(dat, Sex, Total)
  dat1$tot_pop <- dat1$Female + dat1$Male

  dat2 <- dat1 %>% group_by(FAOST_CODE,Year) %>% mutate(total_pop = sum(tot_pop)) %>%
                                                  mutate(female_share = Female / total_pop * 100,
                                                         male_share = Male / total_pop * 100)

  dat2r <- dat2 %>% filter(Area == "Rural") %>% select(FAOST_CODE,Year,female_share,male_share)
  dat2u <- dat2 %>% filter(Area == "Urban") %>% select(FAOST_CODE,Year,female_share,male_share)
  names(dat2r) <- c("FAOST_CODE","Year","rural_female_share","rural_male_share")
  names(dat2u) <- c("FAOST_CODE","Year","urban_female_share","urban_male_share")

  dat3 <- left_join(dat2u,dat2r)
  dat3$rural_pop_gender_shares <- paste(round(dat3$rural_male_share,1),round(dat3$rural_female_share,1), sep="/")

  dat3 <- dat3[c("FAOST_CODE","Year","rural_pop_gender_shares")]
  syb.df <- merge(syb.df,dat3,by=c("FAOST_CODE","Year"), all.x=TRUE)

  # agr_employment_male_female
  dat <- syb.df %>% select(FAOST_CODE,Year,SL.AGR.EMPL.FE.ZS,SL.AGR.EMPL.MA.ZS)
  dat <- dat[!is.na(dat$SL.AGR.EMPL.FE.ZS),]
  dat <- dat[!is.na(dat$SL.AGR.EMPL.MA.ZS),]

  dat$agr_employment_male_female <- paste(round(dat$SL.AGR.EMPL.MA.ZS,1),
                                          round(dat$SL.AGR.EMPL.FE.ZS,1)
                                          ,sep="/")
  dat1 <- dat[c("FAOST_CODE","Year","agr_employment_male_female")]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)



}


#########################################################
#                                                       #
#    RNE regional book vars                             #
#                                                       #
#########################################################

# Droughts, floods, extreme temperatures (% of population, average 1990-2009)

if (!("current_account_balance" %in% names(syb.df)) & region_to_report == "RNE"){

  dat <- getWDItoSYB(name = "current_account_balance", indicator = "BN.CAB.XOKA.GD.ZS")
  dat1 <- dat$aggregates
  dat1$FAOST_CODE <- countrycode::countrycode(dat1$ISO2_WB_CODE, "iso2c", "fao")
  dat1 <- dat1[c("FAOST_CODE","Year","current_account_balance")]
  dat1 <- dat1[!is.na(dat1$FAOST_CODE),]
  dat1 <- dat1[!is.na(dat1$current_account_balance),]
  syb.df <- merge(syb.df,dat1,by=c("FAOST_CODE","Year"), all.x=TRUE)

}





# Countries ---------------------------------------------------------------

# if (region_to_report == "COF"){
  M49countries <- region_key[which(region_key[[region_to_report]]),c("FAOST_CODE","SHORT_NAME")]
  M49countries <- as.data.frame(M49countries)
# } else {
# M49countries <- FAOcountryProfile %>% filter(UNSD_WORLD_REG %in% "World") %>%
#   select(FAOST_CODE, SHORT_NAME) %>%  arrange(SHORT_NAME) %>%  na.omit()
# M49countries <- as.data.frame(M49countries)
# }

## Remove old countries
OldCountries <-
  data.frame(FAOST_CODE = c(15,51,62,151,164,186,228,206,247,246,248,
                            17,83,196,191),
             COUNTRY_NAME = c("Belgium-Luxembourg", "Czechoslovakia",
                              "Ethiopia PDR", "Netherlands Antilles",
                              "Pacific Islands",
                              "Serbia and Montenegro", "Soviet Union",
                              "Sudan (former)", "Yemen (former)",
                              "Yemen (old)", "Yugoslav SFR",
                              "Bermuda","Kiribati","Seychelles","Saint Vincent and the Grenadines "),
             stringsAsFactors = FALSE)
M49countries <-
  M49countries[!M49countries[, "FAOST_CODE"] %in%
                 OldCountries[, "FAOST_CODE"],]
## Remove the countries we do not want to show: ,
tbr.df <-
  data.frame(COUNTRY_NAME = c("Aland Island", "American Samoa", "Andorra",
                            "Anguilla", "Antigua and Barbuda", "Aruba",
                            "Bahamas", "Bonaire", "British Virgin Islands",
                            "Cayman", "Cook Islands", "Curacao", "Dominica",
                            "Equatorial Guinea", "Falkland Islands (Malvinas)",
                            "Faroe", "French Guiana",
                            "French Polynesia", "Gibraltar", "Greenland",
                            "Grenada", "Guadeloupe", "Guam", "Guernsey",
                            "Holy See", "Isle of Man", "Jersey",
                            "Liechtenstein", "Marshall Islands",
                            "Martinique", "Mayotte", "Micronesia", "Monaco",
                            "Montserrat", "Nauru", "New Caledonia", "Niue",
                            "Norfolk Island", "Northern Mariana Islands",
                            "Oman", "Palau", "Papua New Guinea", "Pitcairn Islands",
                            "Puerto Rico", "Qatar", "Reunion", "Saint Barthelemi",
                            "Saint Helena", "Saint Kitts", "Saint Lucia",
                            "Saint Pierre", "San Marino", "Sark", "Saint-Martin (French Part)",
                            "Sint Maarten (Dutch Part)", "Singapore",
                            "Svalbard and Jan Mayen Islands", "Tokelau",
                            "Tonga", "Turks and Caicos Islands","Tuvalu",
                            "United States Virgin Islands", "Wallis and Futuna Islands",
                            "Western Sahara"),
              FAOST_CODE = c(284,5,6,258,8,22,12,278,239,36,47,279,55,61,65,
                              64,69,70,82,85,86,87,88,274,94,264,283,125,
                              127,135,270,145,140,142,148,153,160,161,163,
                              221,180,168,172,177,179,182,282,187,188,189,
                              190,192,285,281,280,200,260,218,219,224,227,
                              240,243,205),
             stringsAsFactors = FALSE)
M49countries <-
  M49countries[!M49countries[, "FAOST_CODE"] %in% tbr.df[, "FAOST_CODE"],]
## Occupied Palestinian Territory
M49countries[M49countries[, "FAOST_CODE"] == 299, "SHORT_NAME"] <-
  "West Bank and Gaza Strip"
## Chinas
M49countries <-
  M49countries[!M49countries[, "FAOST_CODE"] %in% c(41,128,96,357,214),]

  # M49countries <- head(M49countries)

## Add aggregates NOT
# M49countries <-
#   rbind(data.frame(FAOST_CODE = c(5000,5100,5300,5205,5500),
#                    SHORT_NAME = c("World",
#                                       "Africa", "Asia",
#                                       "Latin America and the Caribbean",
#                                       "Oceania"),
#                    stringsAsFactors = FALSE),
#         M49countries)

# Subset countries per region -----------------------

# Add region key and subset


# Indicators --------------------------------------------------------------

## Load the indicators we want to show
indicators.df <- read.csv(paste0(root.dir,"input/data/",region_to_report,"/country_profile_indicators.csv"), na.strings = "", stringsAsFactors = FALSE)


# source(paste0(root.dir,"input/code/table/tableInfo.R"))

## Create the new .tex file
fileOut <- paste0(root.dir,"output/process/CountryProfiles.tex")
if(file.exists(fileOut)) file.remove(fileOut)
file.create(fileOut)
## Subset the dataset
CountryProfile.df <-
  syb.df[, colnames(syb.df) %in% c("FAOST_CODE", "SHORT_NAME", "Year",
                                     na.omit(indicators.df[, "INDICATOR1"]),
                                     na.omit(indicators.df[, "INDICATOR2"]),
                                     na.omit(indicators.df[, "INDICATOR3"]))]
if ("OA.TPBS.POP.PPL.NO" %in% names(CountryProfile.df)) CountryProfile.df[, "OA.TPBS.POP.PPL.NO"] <- CountryProfile.df[, "OA.TPBS.POP.PPL.NO"]/1000000
if ("OA.TPR.POP.PPL.NO" %in% names(CountryProfile.df)) CountryProfile.df[, "OA.TPR.POP.PPL.NO"] <- CountryProfile.df[, "OA.TPR.POP.PPL.NO"]/1000000




# Multiplying
multip.df <- indicators.df[!is.na(indicators.df$MULTIPLIER),]

for (name in names(CountryProfile.df)) {
  if (name %in% multip.df$INDICATOR1) CountryProfile.df[[name]] <- CountryProfile.df[[name]] / multip.df[multip.df$INDICATOR1 %in% name,]$MULTIPLIER
}


# TeX file ----------------------------------------------------------------

## Years to be shown in the country profile
year1 = 1990
year2 = 2000
year3 = 2014
## This script creates the latex file

## Set the rowheight for cprofiles for each book

tbl_row_height <- 1.12
if (region_to_report == "COF") tbl_row_height <- 1.42
if (region_to_report == "RAF") tbl_row_height <- 1.18
if (region_to_report == "RAP") tbl_row_height <- 1.12
if (region_to_report == "REU") tbl_row_height <- 1.18
if (region_to_report == "RNE") tbl_row_height <- 1.32

cat(paste0("\\renewcommand{\\arraystretch}{",tbl_row_height,"}\n"),
    file = fileOut, append = TRUE)


cat("\\setlength{\\tabcolsep}{4pt}\n",
    file = fileOut, append = TRUE) ## Reduce the space between columns
cat("\\normalsize\n",
    file = fileOut, append = TRUE)
for (i in 1:nrow(M49countries)) {
  ## header

  # conditional row colors ------------------------------
  row_color <- "FAOblue"
  if (region_to_report == "COF") row_color <- "part7"
  define_row_color <- paste0("\\rowcolors{1}{",row_color,"!10}{white}")
  # conditional row colors ------------------------------

if (region_to_report == "COF"){
    cat("\\CountryData{", M49countries[i, "SHORT_NAME"], "}",
      define_row_color,
      "\\begin{tabular}{L{4.6cm} R{0.9cm} R{0.9cm} R{0.9cm}}
      \\toprule
      \\multicolumn{1}{c}{} & \\multicolumn{1}{c}{", year1, "} & \\multicolumn{1}{c}{", year2, "} & \\multicolumn{1}{c}{", year3, "} \\\\
      \\midrule\n",
      file = fileOut, append = TRUE)
} else{
    cat("\\CountryData{", M49countries[i, "SHORT_NAME"], "}",
      define_row_color,
      "\\begin{tabular}{L{4.0cm} R{1cm} R{1cm} R{1cm}}
      \\toprule
      \\multicolumn{1}{c}{} & \\multicolumn{1}{c}{", year1, "} & \\multicolumn{1}{c}{", year2, "} & \\multicolumn{1}{c}{", year3, "} \\\\
      \\midrule\n",
      file = fileOut, append = TRUE)
}

  ## data
  tmp = CountryProfile.df[CountryProfile.df[, "FAOST_CODE"] == M49countries[i, "FAOST_CODE"], ]
  for (part in 1:length(unique(indicators.df[, "PART"]))) {
#     cat("\t\\multicolumn{4}{l}{\\textcolor{",paste0("part", part),"}{\\textbf{\\large{", unique(indicators.df$PART)[part], "}}}} \\\\ \n",
#         file = fileOut, append = TRUE, sep = "")

    if (region_to_report == "COF"){
      if (part %in% c(3,4)) {
      cat("\t\\multicolumn{4}{l}{\\textit{\\normalsize{", unique(indicators.df$PART)[part], "}}} \\\\ \n",
        file = fileOut, append = TRUE, sep = "")
      } else cat("\t\\multicolumn{4}{l}{\\textcolor{",row_color,"}{\\textbf{\\large{", unique(indicators.df$PART)[part], "}}}} \\\\ \n",
        file = fileOut, append = TRUE, sep = "")
    }
    if (region_to_report == "RAF"){
      if (part %in% c(4,5)) {
      cat("\t\\multicolumn{4}{l}{\\textit{\\normalsize{", unique(indicators.df$PART)[part], "}}} \\\\ \n",
        file = fileOut, append = TRUE, sep = "")
      } else cat("\t\\multicolumn{4}{l}{\\textcolor{",row_color,"}{\\textbf{\\large{", unique(indicators.df$PART)[part], "}}}} \\\\ \n",
        file = fileOut, append = TRUE, sep = "")
    }
    if (region_to_report == "RAP"){
      if (part %in% c(4,5)) {
      cat("\t\\multicolumn{4}{l}{\\textit{\\normalsize{", unique(indicators.df$PART)[part], "}}} \\\\ \n",
        file = fileOut, append = TRUE, sep = "")
      } else cat("\t\\multicolumn{4}{l}{\\textcolor{",row_color,"}{\\textbf{\\large{", unique(indicators.df$PART)[part], "}}}} \\\\ \n",
        file = fileOut, append = TRUE, sep = "")
    }


    subindicators.df = indicators.df[indicators.df[, "PART"] == unique(indicators.df$PART)[part], ]
    for (j in 1:nrow(subindicators.df)) {
      y1 = tmp[tmp[, "Year"] == year1, subindicators.df[j, "INDICATOR1"]]
      if (length(y1) == 1) {
        if (!is.na(y1)) {
          if (is.numeric(y1)) {
            chunk1 = format(round(y1, digits = subindicators.df[j, "DIGITS"]), nsmall = 0, big.mark = ",")
          } else {
            chunk1 = y1
          }
        } else {
          lya = na.locf(tmp[tmp[, "Year"] %in% c((year1-2):(year1+3)), subindicators.df[j, "INDICATOR1"]], na.rm = FALSE)[6]
          if (!is.na(lya)) {
            if (is.numeric(lya)) {
              chunk1 = paste0("\\textit{", format(round(lya, digits = subindicators.df[j, "DIGITS"]), nsmall = 0, big.mark = ","), "}")
            } else {
              chunk1 = paste0("\\textit{", lya, "}")
            }
          } else {
            chunk1 = ""
          }
        }
      } else {
        chunk1 = ""
      }
      y2 = tmp[tmp[, "Year"] == year2, subindicators.df[j, "INDICATOR1"]]
      if (length(y2) == 1) {
        if (!is.na(y2)) {
          if (is.numeric(y2)) {
            chunk2 = format(round(y2, digits = subindicators.df[j, "DIGITS"]), nsmall = 0, big.mark = ",")
          } else {
            chunk2 = y2
          }
        } else {
          lya = na.locf(tmp[tmp[, "Year"] %in% c((year2-7):(year2+3)), subindicators.df[j, "INDICATOR1"]], na.rm = FALSE)[11]
          if (!is.na(lya)) {
            if (is.numeric(lya)) {
              chunk2 = paste0("\\textit{", format(round(lya, digits = subindicators.df[j, "DIGITS"]), nsmall = 0, big.mark = ","), "}")
            } else {
              chunk2 = paste0("\\textit{", lya, "}")
            }
          } else {
            chunk2 = ""
          }
        }
      } else {
        chunk2 = ""
      }
      y3 = tmp[tmp[, "Year"] == year3, subindicators.df[j, "INDICATOR1"]]
      if (length(y3) == 1) {
        if (!is.na(y3)) {
          if (is.numeric(y3)) {
            chunk3 = format(round(y3, digits = subindicators.df[j, "DIGITS"]), nsmall = 0, big.mark = ",")
          } else {
            chunk3 = y3
          }
        } else {
          lya = na.locf(tmp[tmp[, "Year"] %in% c((year3-9):(year3+2)), subindicators.df[j, "INDICATOR1"]], na.rm = FALSE)[12]
          if (!is.na(lya)) {
            if (is.numeric(lya)) {
              chunk3 = paste0("\\textit{", format(round(lya, digits = subindicators.df[j, "DIGITS"]), nsmall = 0, big.mark = ","), "}")
            } else {
              chunk3 = paste0("\\textit{", lya, "}")
            }
          } else {
            chunk3 = ""
          }
        }
      } else {
        chunk3 = ""
      }
      chunk1 <- gsub(pattern = ",", replacement = "\\\\,", x = chunk1)
      chunk2 <- gsub(pattern = ",", replacement = "\\\\,", x = chunk2)
      chunk3 <- gsub(pattern = ",", replacement = "\\\\,", x = chunk3)
      cat("\t ~ ", sanitizeToLatex(subindicators.df[j, "SERIES_NAME_SHORT"]), " & ", chunk1, " ~ \\ \\ & ", chunk2, " ~ \\ \\ & ", chunk3, " ~ \\ \\ \\\\ \n",
          file = fileOut, append = TRUE, sep = "")

    }
  }
  ## tail
  cat("\ \ \ \ \ \ \ \\toprule
      \\end{tabular}
      \\clearpage\n",
      file = fileOut, append = TRUE)
}


# -- in case we need footnotes under each of the country profile table
# sed -i 's#{ 2014 }#{ 2014* }#' ./publication/Tables/CountryProfiles.tex && sed -i 's#\\end{tabular}#\*We can add a footnote for each table like this..\n\\end{tabular}#' ./publication/Tables/CountryProfiles.tex
# sed -i 's#Net food#Net food**#' ./publication/Tables/CountryProfiles.tex && sed -i 's#\\end{tabular}#\n\**excluding fish\n\\end{tabular}#' ./publication/Tables/CountryProfiles.tex


syb.df <- temp

# ###########################################################################
# ## End
# ###########################################################################

@

\newpage
% If coffee book lets put here some nice brown color
<<define_empty_page_color, echo=FALSE, results='asis', eval=TRUE>>=
  empty_page_color <- "FAOblue"
  if (region_to_report == "COF") empty_page_color <- "part7"
  cat(paste0("\\pagecolor{",empty_page_color,"}"))
  @

\thispagestyle{empty}
\mbox{}
\newpage
\thispagestyle{empty}
\mbox{}
\clearpage
\pagecolor{white}

%%% COUNTRY DATA
<<define_new_part_color, echo=FALSE, results='asis', eval=TRUE>>=
  empty_page_color <- "FAOblue"
  if (region_to_report == "COF") empty_page_color <- "part7"
  cat(paste0("\\newpart{",empty_page_color,"}"))
  @

\phantomsection
\addcontentsline{toc}{section}{Country Profiles}
\faoset{bgcolor=white}\selectcolor
\parindent=0pt
\parskip=\medskipamount
\hangafter=-2
\input{CountryProfiles.tex}

\newpage
